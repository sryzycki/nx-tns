Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@angular/core");
/**
 * This is organized in this module just for good housekeeping
 * However it is provided via the CoreModule to ensure it's
 * a singleton the entire app can use.
 * If your module service is *only* used in this module
 * you can have the service provided by this module.
 * In this case however, we want this service to be a true singleton
 * which can be injected into any component/service anywhere and
 * it will be the same instance therefore this is provided by the CoreModule.
 */
let ItemService = class ItemService {
    /**
     * This is organized in this module just for good housekeeping
     * However it is provided via the CoreModule to ensure it's
     * a singleton the entire app can use.
     * If your module service is *only* used in this module
     * you can have the service provided by this module.
     * In this case however, we want this service to be a true singleton
     * which can be injected into any component/service anywhere and
     * it will be the same instance therefore this is provided by the CoreModule.
     */
    constructor() {
        this.items = new Array({ id: 1, name: 'Ter Stegen', role: 'Goalkeeper' }, { id: 3, name: 'Piqué', role: 'Defender' }, { id: 4, name: 'I. Rakitic', role: 'Midfielder' }, { id: 5, name: 'Sergio', role: 'Midfielder' }, { id: 6, name: 'Denis Suárez', role: 'Midfielder' }, { id: 7, name: 'Arda', role: 'Midfielder' }, { id: 8, name: 'A. Iniesta', role: 'Midfielder' }, { id: 9, name: 'Suárez', role: 'Forward' }, { id: 10, name: 'Messi', role: 'Forward' }, { id: 11, name: 'Neymar', role: 'Forward' }, { id: 12, name: 'Rafinha', role: 'Midfielder' }, { id: 13, name: 'Cillessen', role: 'Goalkeeper' }, { id: 14, name: 'Mascherano', role: 'Defender' }, { id: 17, name: 'Paco Alcácer', role: 'Forward' }, { id: 18, name: 'Jordi Alba', role: 'Defender' }, { id: 19, name: 'Digne', role: 'Defender' }, { id: 20, name: 'Sergi Roberto', role: 'Midfielder' }, { id: 21, name: 'André Gomes', role: 'Midfielder' }, { id: 22, name: 'Aleix Vidal', role: 'Midfielder' }, { id: 23, name: 'Umtiti', role: 'Defender' }, { id: 24, name: 'Mathieu', role: 'Defender' }, { id: 25, name: 'Masip', role: 'Goalkeeper' });
    }
    getItems() {
        return this.items;
    }
    getItem(id) {
        return this.items.filter(item => item.id === id)[0];
    }
};
ItemService = __decorate([
    core_1.Injectable()
], ItemService);
exports.ItemService = ItemService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaXRlbS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSx3Q0FBMkM7QUFJM0M7Ozs7Ozs7OztHQVNHO0FBRUgsSUFBYSxXQUFXLEdBQXhCO0lBWEE7Ozs7Ozs7OztPQVNHO0lBQ0g7UUFFVSxVQUFLLEdBQUcsSUFBSSxLQUFLLENBQ3ZCLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFDakQsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUMxQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQ2pELEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFDN0MsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUNuRCxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQzNDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFDakQsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUMxQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEVBQzFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsRUFDM0MsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUMvQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQ2pELEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFDaEQsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUNqRCxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQ2hELEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFDM0MsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUNyRCxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEVBQ25ELEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFDbkQsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxFQUM1QyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEVBQzdDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FDOUMsQ0FBQztJQVNKLENBQUM7SUFQQyxRQUFRO1FBQ04sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUFVO1FBQ2hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztDQUNGLENBQUE7QUFqQ1ksV0FBVztJQUR2QixpQkFBVSxFQUFFO0dBQ0EsV0FBVyxDQWlDdkI7QUFqQ1ksa0NBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEl0ZW0gfSBmcm9tICcuLi9tb2RlbHMnO1xuXG4vKipcbiAqIFRoaXMgaXMgb3JnYW5pemVkIGluIHRoaXMgbW9kdWxlIGp1c3QgZm9yIGdvb2QgaG91c2VrZWVwaW5nXG4gKiBIb3dldmVyIGl0IGlzIHByb3ZpZGVkIHZpYSB0aGUgQ29yZU1vZHVsZSB0byBlbnN1cmUgaXQnc1xuICogYSBzaW5nbGV0b24gdGhlIGVudGlyZSBhcHAgY2FuIHVzZS5cbiAqIElmIHlvdXIgbW9kdWxlIHNlcnZpY2UgaXMgKm9ubHkqIHVzZWQgaW4gdGhpcyBtb2R1bGVcbiAqIHlvdSBjYW4gaGF2ZSB0aGUgc2VydmljZSBwcm92aWRlZCBieSB0aGlzIG1vZHVsZS5cbiAqIEluIHRoaXMgY2FzZSBob3dldmVyLCB3ZSB3YW50IHRoaXMgc2VydmljZSB0byBiZSBhIHRydWUgc2luZ2xldG9uXG4gKiB3aGljaCBjYW4gYmUgaW5qZWN0ZWQgaW50byBhbnkgY29tcG9uZW50L3NlcnZpY2UgYW55d2hlcmUgYW5kXG4gKiBpdCB3aWxsIGJlIHRoZSBzYW1lIGluc3RhbmNlIHRoZXJlZm9yZSB0aGlzIGlzIHByb3ZpZGVkIGJ5IHRoZSBDb3JlTW9kdWxlLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSXRlbVNlcnZpY2Uge1xuICBwcml2YXRlIGl0ZW1zID0gbmV3IEFycmF5PEl0ZW0+KFxuICAgIHsgaWQ6IDEsIG5hbWU6ICdUZXIgU3RlZ2VuJywgcm9sZTogJ0dvYWxrZWVwZXInIH0sXG4gICAgeyBpZDogMywgbmFtZTogJ1BpcXXDqScsIHJvbGU6ICdEZWZlbmRlcicgfSxcbiAgICB7IGlkOiA0LCBuYW1lOiAnSS4gUmFraXRpYycsIHJvbGU6ICdNaWRmaWVsZGVyJyB9LFxuICAgIHsgaWQ6IDUsIG5hbWU6ICdTZXJnaW8nLCByb2xlOiAnTWlkZmllbGRlcicgfSxcbiAgICB7IGlkOiA2LCBuYW1lOiAnRGVuaXMgU3XDoXJleicsIHJvbGU6ICdNaWRmaWVsZGVyJyB9LFxuICAgIHsgaWQ6IDcsIG5hbWU6ICdBcmRhJywgcm9sZTogJ01pZGZpZWxkZXInIH0sXG4gICAgeyBpZDogOCwgbmFtZTogJ0EuIEluaWVzdGEnLCByb2xlOiAnTWlkZmllbGRlcicgfSxcbiAgICB7IGlkOiA5LCBuYW1lOiAnU3XDoXJleicsIHJvbGU6ICdGb3J3YXJkJyB9LFxuICAgIHsgaWQ6IDEwLCBuYW1lOiAnTWVzc2knLCByb2xlOiAnRm9yd2FyZCcgfSxcbiAgICB7IGlkOiAxMSwgbmFtZTogJ05leW1hcicsIHJvbGU6ICdGb3J3YXJkJyB9LFxuICAgIHsgaWQ6IDEyLCBuYW1lOiAnUmFmaW5oYScsIHJvbGU6ICdNaWRmaWVsZGVyJyB9LFxuICAgIHsgaWQ6IDEzLCBuYW1lOiAnQ2lsbGVzc2VuJywgcm9sZTogJ0dvYWxrZWVwZXInIH0sXG4gICAgeyBpZDogMTQsIG5hbWU6ICdNYXNjaGVyYW5vJywgcm9sZTogJ0RlZmVuZGVyJyB9LFxuICAgIHsgaWQ6IDE3LCBuYW1lOiAnUGFjbyBBbGPDoWNlcicsIHJvbGU6ICdGb3J3YXJkJyB9LFxuICAgIHsgaWQ6IDE4LCBuYW1lOiAnSm9yZGkgQWxiYScsIHJvbGU6ICdEZWZlbmRlcicgfSxcbiAgICB7IGlkOiAxOSwgbmFtZTogJ0RpZ25lJywgcm9sZTogJ0RlZmVuZGVyJyB9LFxuICAgIHsgaWQ6IDIwLCBuYW1lOiAnU2VyZ2kgUm9iZXJ0bycsIHJvbGU6ICdNaWRmaWVsZGVyJyB9LFxuICAgIHsgaWQ6IDIxLCBuYW1lOiAnQW5kcsOpIEdvbWVzJywgcm9sZTogJ01pZGZpZWxkZXInIH0sXG4gICAgeyBpZDogMjIsIG5hbWU6ICdBbGVpeCBWaWRhbCcsIHJvbGU6ICdNaWRmaWVsZGVyJyB9LFxuICAgIHsgaWQ6IDIzLCBuYW1lOiAnVW10aXRpJywgcm9sZTogJ0RlZmVuZGVyJyB9LFxuICAgIHsgaWQ6IDI0LCBuYW1lOiAnTWF0aGlldScsIHJvbGU6ICdEZWZlbmRlcicgfSxcbiAgICB7IGlkOiAyNSwgbmFtZTogJ01hc2lwJywgcm9sZTogJ0dvYWxrZWVwZXInIH1cbiAgKTtcblxuICBnZXRJdGVtcygpOiBJdGVtW10ge1xuICAgIHJldHVybiB0aGlzLml0ZW1zO1xuICB9XG5cbiAgZ2V0SXRlbShpZDogbnVtYmVyKTogSXRlbSB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbXMuZmlsdGVyKGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpWzBdO1xuICB9XG59XG4iXX0=